C51 COMPILER V9.00   UART                                                                  05/12/2017 21:47:34 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\list\uart.obj
COMPILER INVOKED BY: E:\2.DevelopSoft\Keil\C51\BIN\C51.EXE uart.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\uart.lst) OBJEC
                    -T(.\list\uart.obj)

line level    source

   1          #include "uart.h"
   2          #include<string.h>
   3          
   4          #define Uart1_Buf_Max 20               //串口数据缓存长度
   5          u8 idata  Rec_Buf[Uart1_Buf_Max];  //串口数据缓存
   6          u8 point1 = 0;             //绶存指针
   7          
   8          //#define Uart2_Buf_Max 20               //串口数据缓存长度
   9          //u8 xdata  Uart2_Rec_Buf[Uart2_Buf_Max];  //串口数据缓存
  10          u8 point2 = 0;             //绶存指针
  11          bit     B_TX2_Busy = 0; //发送忙标志
  12          
  13          char idata gpsRxBuffer[gpsRxBufferLength];
  14          unsigned char RX_Count = 0;
  15          _SaveData Save_Data;
  16          
  17          #define Uart3_Buf_Max 600               //串口数据缓存长度
  18          u8 xdata  Uart3_Rec_Buf[Uart3_Buf_Max];  //串口数据缓存
  19          u8 point3 = 0;             //绶存指针
  20          bit     B_TX3_Busy = 0; //发送忙标志
  21          
  22          
  23          
  24          
  25          void UartInit(void)             //9600bps@11.0592MHz
  26          {
  27   1      //注意: STC15W4K32S4系列的芯片,上电后所有与PWM相关的IO口均为
  28   1      //      高阻态,需将这些口设置为准双向口或强推挽模式方可正常使用
  29   1      //相关IO: P0.6/P0.7/P1.6/P1.7/P2.1/P2.2
  30   1      //        P2.3/P2.7/P3.7/P4.2/P4.4/P4.5
  31   1      //      P3M0 &= ~(1<<7);                //设置P3.7为准双向IO
  32   1      //      P3M1 &= ~(1<<7);
  33   1      //
  34   1      //      S1_USE_P36P37();
  35   1      
  36   1              PCON &= 0x7F;           //波特率不倍速
  37   1              SCON = 0x50;            //8位数据,可变波特率
  38   1              AUXR |= 0x40;           //定时器1时钟为Fosc,即1T
  39   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
  40   1              TMOD &= 0x0F;           //清除定时器1模式位
  41   1              TMOD |= 0x20;           //设定定时器1为8位自动重装方式
  42   1              TL1 = 0xDC;             //设定定时初值
  43   1              TH1 = 0xDC;             //设定定时器重装值
  44   1              ET1 = 0;                //禁止定时器1中断
  45   1              TR1 = 1;                //启动定时器1
  46   1      
  47   1      
  48   1              S2CON = 0x50;           //8位数据,可变波特率
  49   1              AUXR |= 0x04;           //定时器2时钟为Fosc,即1T
  50   1              T2L = 0xE0;             //设定定时初值
  51   1              T2H = 0xFE;             //设定定时初值
  52   1              AUXR |= 0x10;           //启动定时器2
  53   1      
  54   1              S3CON = 0x10;           //8位数据,可变波特率
C51 COMPILER V9.00   UART                                                                  05/12/2017 21:47:34 PAGE 2   

  55   1              S3CON |= 0x40;          //串口3选择定时器3为波特率发生器
  56   1              T4T3M |= 0x02;          //定时器3时钟为Fosc,即1T
  57   1              T3L = 0xE0;             //设定定时初值
  58   1              T3H = 0xFE;             //设定定时初值
  59   1              T4T3M |= 0x08;          //启动定时器3
  60   1      
  61   1              UART2_INT_ENABLE();
  62   1              UART3_INT_ENABLE();
  63   1              ES = 1;
  64   1              EA = 1;
  65   1      }
  66          
  67          /*----------------------------
  68          发送串口数据
  69          ----------------------------*/
  70          void SendData(unsigned char ch)
  71          {
  72   1          SBUF = ch;                 //写数据到UART数据寄存器
  73   1                      while(TI == 0);
  74   1                      TI = 0;
  75   1      }
  76          
  77          /*----------------------------
  78          发送字符串
  79          ----------------------------*/
  80          void SendString(char *s)
  81          {
  82   1          while (*s)                  //检测字符串结束标志
  83   1          {
  84   2              SendData(*s++);         //发送当前字符
  85   2          }
  86   1      }
  87          
  88          bit Hand(unsigned char *a)                   // 串口命令识别函数
  89          { 
  90   1          if(strstr(Rec_Buf,a)!=NULL)
  91   1                  return 1;
  92   1              else
  93   1                      return 0;
  94   1      }
  95          
  96          void CLR_Buf(void)                           // 串口缓存清理
  97          {
  98   1              memset(Rec_Buf, 0, Uart1_Buf_Max);      //清空
  99   1      
 100   1          point1 = 0;                    
 101   1      }
 102          
 103          void Usart() interrupt 4 using 1            // 串口中断函数
 104          {
 105   1              ES = 0;
 106   1              if (RI)
 107   1          {
 108   2            RI = 0;                                //清除RI位
 109   2                      Rec_Buf[point1] = SBUF; 
 110   2      //              if (Rec_Buf[0] == 0xd9)
 111   2      //                      {
 112   2      //                              IAP_CONTR = 0x60;
 113   2      //                      }
 114   2                              
 115   2                      point1++;               
 116   2                      if(point1>=Uart1_Buf_Max)          
C51 COMPILER V9.00   UART                                                                  05/12/2017 21:47:34 PAGE 3   

 117   2                      {
 118   3                              point1 = 0;
 119   3                      }           
 120   2      
 121   2          }
 122   1          if (TI)
 123   1          {
 124   2              TI = 0;                 //清除TI位
 125   2      
 126   2          }
 127   1              ES =  1;
 128   1      }
 129          
 130          /*----------------------------
 131          通过串口2发送串口数据
 132          ----------------------------*/
 133          void Uart2SendData(unsigned char ch)
 134          {
 135   1              while(B_TX2_Busy);      //不忙后发送数据
 136   1          S2BUF = ch;                 //写数据到UART数据寄存器
 137   1              B_TX2_Busy = 1;
 138   1      }
 139          
 140          /*----------------------------
 141          通过串口2发送字符串
 142          ----------------------------*/
 143          void Uart2SendString(char *s)
 144          {
 145   1          while (*s)                  //检测字符串结束标志
 146   1          {
 147   2              Uart2SendData(*s++);         //发送当前字符
 148   2          }
 149   1      }
 150          
 151          //bit Uart2Hand(unsigned char *a)                   // 串口命令识别函数
 152          //{ 
 153          //    if(strstr(Uart2_Rec_Buf,a)!=NULL)
 154          //          return 1;
 155          //      else
 156          //              return 0;
 157          //}
 158          
 159          //void Uart2CLR_Buf(void)                           // 串口缓存清理
 160          //{
 161          //      memset(Uart2_Rec_Buf, 0, Uart2_Buf_Max);      //清空
 162          //
 163          //    point2 = 0;                    
 164          //}
 165          
 166          void Usart2() interrupt 8 using 1 
 167          {
 168   1              unsigned char temp = 0;
 169   1              char i = 0;
 170   1      
 171   1              UART2_INT_DISABLE();            
 172   1              if(RI2)
 173   1          {
 174   2                      temp = S2BUF;
 175   2                      CLR_RI2();                               //清除RI位
 176   2      
 177   2                      if(temp == '$')
 178   2                      {
C51 COMPILER V9.00   UART                                                                  05/12/2017 21:47:34 PAGE 4   

 179   3                              RX_Count = 0;   
 180   3                      }
 181   2                              
 182   2                      if(RX_Count <= 5)
 183   2                      {
 184   3                         gpsRxBuffer[RX_Count++] = temp;
 185   3                      }
 186   2                      else if(gpsRxBuffer[0] == '$' &gpsRxBuffer[4] == 'M' && gpsRxBuffer[5] == 'C')                  //确定是否收到"GPRMC/GN
             -RMC"这一帧数据
 187   2                      {
 188   3                              gpsRxBuffer[RX_Count++] = temp;
 189   3                              if(temp == '\n')                                                                           
 190   3                              {
 191   4                                      memset(Save_Data.GPS_Buffer, 0, GPS_Buffer_Length);      //清空
 192   4                                      memcpy(Save_Data.GPS_Buffer, gpsRxBuffer, RX_Count);    //保存数据
 193   4                                      Save_Data.isGetData = true;
 194   4                                      RX_Count = 0;
 195   4                                      memset(gpsRxBuffer, 0, gpsRxBufferLength);      //清空                          
 196   4                              }
 197   3                              
 198   3                              if(RX_Count >= 75)
 199   3                              {
 200   4                                      RX_Count = 75;
 201   4                                      gpsRxBuffer[RX_Count] = '\0';//添加结束符
 202   4                              }                       
 203   3                      } 
 204   2               
 205   2      
 206   2          }
 207   1          if (TI2)
 208   1          {
 209   2              CLR_TI2();                //清除TI位
 210   2                      B_TX2_Busy = 0; //清空忙标志
 211   2      
 212   2          }
 213   1              UART2_INT_ENABLE();
 214   1              
 215   1              
 216   1      
 217   1      }
 218          
 219          /*----------------------------
 220          通过串口3发送串口数据
 221          ----------------------------*/
 222          void Uart3SendData(unsigned char ch)
 223          {       
 224   1          while(B_TX3_Busy);  //不忙后发送数据
 225   1          S3BUF = ch;                 //写数据到UART数据寄存器
 226   1              B_TX3_Busy = 1;
 227   1      }
 228          
 229          /*----------------------------
 230          通过串口3发送字符串
 231          ----------------------------*/
 232          void Uart3SendString(char *s)
 233          {
 234   1          while (*s)                  //检测字符串结束标志
 235   1          {
 236   2              Uart3SendData(*s++);         //发送当前字符
 237   2          }
 238   1      }
 239          
C51 COMPILER V9.00   UART                                                                  05/12/2017 21:47:34 PAGE 5   

 240          bit Uart3Hand(unsigned char *a)                   // 串口命令识别函数
 241          { 
 242   1          if(strstr(Uart3_Rec_Buf,a)!=NULL)
 243   1                  return 1;
 244   1              else
 245   1                      return 0;
 246   1      }
 247          
 248          void Uart3CLR_Buf(void)                           // 串口缓存清理
 249          {
 250   1              memset(Uart3_Rec_Buf, 0, Uart3_Buf_Max);      //清空
 251   1      
 252   1          point3 = 0;                    
 253   1      }
 254          
 255          void Usart3() interrupt 17 
 256          {
 257   1              UART3_INT_DISABLE();    
 258   1              if(RI3)
 259   1          {
 260   2                      CLR_RI3();                               //清除RI位
 261   2                      Uart3_Rec_Buf[point3] = S3BUF; 
 262   2      //              if (Rec_Buf[0] == 0xd9)
 263   2      //                      {
 264   2      //                              IAP_CONTR = 0x60;
 265   2      //                      }
 266   2                              
 267   2                      point3++;               
 268   2                      if(point3>=Uart3_Buf_Max)          
 269   2                      {
 270   3                              point3 = 0;
 271   3                      }           
 272   2      
 273   2          }
 274   1          if (TI3)
 275   1          {
 276   2              CLR_TI3();                //清除TI位
 277   2                      B_TX3_Busy = 0;
 278   2          }
 279   1              UART3_INT_ENABLE();     
 280   1      }
 281          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    626    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    721    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      16
   IDATA SIZE       =     96    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
